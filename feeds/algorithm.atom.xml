<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Python and Data Science Blog - algorithm</title><link href="/" rel="alternate"></link><link href="/feeds/algorithm.atom.xml" rel="self"></link><id>/</id><updated>2020-11-26T00:00:00+05:30</updated><entry><title>Count twos</title><link href="/count-twos.html" rel="alternate"></link><published>2020-11-26T00:00:00+05:30</published><updated>2020-11-26T00:00:00+05:30</updated><author><name>Abhishek Saini</name></author><id>tag:None,2020-11-26:/count-twos.html</id><summary type="html">&lt;p&gt;Short version for index and feeds&lt;/p&gt;</summary><content type="html">&lt;h1&gt;Count 2's between 0 and n&lt;/h1&gt;
&lt;p&gt;Let's look at a very rudimentary algorithm for finding the number of 2's between 0 and n.&lt;/p&gt;
&lt;h2&gt;Brute force solution&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;We loop through every integer x between zero and n.  &lt;/li&gt;
&lt;li&gt;For each such integer x count the number of 2's in x&lt;/li&gt;
&lt;li&gt;Keep a running sum of the counts to get the final result&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Here's the Python code for the same:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;calc_twos_brute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;cnt&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;l&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;
        &lt;span class="n"&gt;cnt&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;cnt&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;count&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;cnt&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The run time of this algorithm increases proportionally to n (O(n)) and if you test this for a big enough number you will realize how slow this gets. &lt;/p&gt;
&lt;p&gt;However, a brute force solution can be super useful when trying to debug a better solution (which we will look at in a future post).&lt;/p&gt;</content><category term="algorithm"></category><category term="algorithm"></category><category term="counting"></category><category term="combinatorics"></category></entry></feed>